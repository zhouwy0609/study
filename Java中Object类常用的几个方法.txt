1.Java中Object类常用的几个方法

	前言
		Java 中的 Object 方法在面试中是一个非常高频的点，毕竟 Object 是所有类的“老祖宗”。
		Java 中所有的类都有一个共同的祖先 Object 类，子类都会继承所有 Object 类中的 public 方法。
		
		
		1. getClass 方法
		
			public final native Class<?> getClass();
		
		final 方法、获取对象的运行时 class 对象，class 对象就是描述对象所属类的对象。这个方法通常是和 Java 反射机制搭配使用的。
		
		
		2. hashCode 方法
		
			public native int hashCode();
		
		该方法主要用于获取对象的散列值。Object 中该方法默认返回的是对象的堆内存地址。
		
		
		
		3. equals 方法
			
			public boolean equals(Object obj) {        return (this == obj);}
		
			该方法用于比较两个对象，如果这两个对象引用指向的是同一个对象，那么返回 true，否则返回 false。
			一般 equals 和 == 是不一样的，但是在 Object 中两者是一样的。子类一般都要重写这个方法。
		
		
		4. clone 方法
		
			protected native Object clone() throws CloneNotSupportedException;
			
			该方法是保护方法，实现对象的浅复制，只有实现了 Cloneable 接口才可以调用该方法，否则抛出 CloneNotSupportedException 异常。
			默认的 clone 方法是浅拷贝。所谓浅拷贝，指的是对象内属性引用的对象只会拷贝引用地址，而不会将引用的对象重新分配内存。
			深拷贝则是会连引用的对象也重新创建。
			
		5. toString 方法
		
			public String toString() {
				return getClass().getName() + "@" + Integer.toHexString(hashCode());
			}
		
			返回一个 String 对象，一般子类都有覆盖。默认返回格式如下：对象的 class 名称 + @ + hashCode 的十六进制字符串。
			
			
		6. notify 方法
		
			public final native void notify();
			
			final 方法，主要用于唤醒在该对象上等待的某个线程。
			
		
		7. notifyAll 方法
			
			public final native void notifyAll();
			
			final 方法，主要用于唤醒在该对象上等待的所有线程。
			
		
		8. wait(long timeout) 方法
		
			public final native void wait(long timeout) throws InterruptedException;
			
			wait 方法就是使当前线程等待该对象的锁，当前线程必须是该对象的拥有者，也就是具有该对象的锁。wait() 方法一直等待，直到获得锁或者被中断。wait(long timeout) 设定一个超时间隔，如果在规定时间内没有获得锁就返回。
			
		
		9. wait(long timeout, int nanos) 方法
		
			public final void wait(long timeout, int nanos) throws InterruptedException {
				  if (timeout < 0) {
					throw new IllegalArgumentException("timeout value is negative");
				  }

				  if (nanos < 0 || nanos > 999999) {
					throw new IllegalArgumentException(
							  "nanosecond timeout value out of range");
				  }

				  if (nanos >= 500000 || (nanos != 0 && timeout == 0)) {
					timeout++;
				  }

				wait(timeout);
			}
			
			
			参数说明

			timeout：最大等待时间（毫秒）

			nanos：附加时间在毫秒范围（0-999999）

				该方法导致当前线程等待，直到其他线程调用此对象的 notify() 方法或notifyAll()方法，或在指定已经过去的时间。
			此方法类似于 wait 方法的一个参数，但它允许更好地控制的时间等待一个通知放弃之前的量。
				实时量，以毫微秒计算，计算公式如下：
				
				1000000 * timeout + nanos
	
			在所有其他方面，这种方法与 wait(long timeout) 做同样的事情。特别是 wait(0, 0) 表示和 wait(0) 相同。
			
			
			
		10. wait 方法

			public final void wait() throws InterruptedException {  wait(0);}
			
			可以看到 wait() 方法实际上调用的是 wait(long timeout) 方法，只不过 timeout 为 0，即不等待
			
			
		11. finalize 方法
		
			protected void finalize() throws Throwable { }
			
			该方法是保护方法，主要用于在 GC 的时候再次被调用，如果我们实现了这个方法，对象可能在这个方法中再次复活，从而避免被 GC 回收。
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			